basePath: /api
definitions:
  api.CreateArticleRequest:
    properties:
      content:
        example: lorem ipsum lorem ipsum lorem ipsum
        type: string
      tags:
        example:
        - golang
        - tech
        items:
          type: string
        type: array
      title:
        example: I love Golang
        type: string
    type: object
  api.CreateArticleResponse:
    properties:
      article:
        $ref: '#/definitions/database.Article'
    type: object
  api.ErrorResponse:
    properties:
      message:
        example: Invalid Request Body
        type: string
      status:
        example: error
        type: string
    type: object
  api.GetArticleByIDResponse:
    properties:
      article:
        $ref: '#/definitions/database.Article'
    type: object
  api.GetArticlesResponse:
    properties:
      articles:
        items:
          $ref: '#/definitions/database.Article'
        type: array
    type: object
  api.SuccessReponse:
    properties:
      data: {}
      status:
        example: success
        type: string
    type: object
  api.UpdateArticleRequest:
    properties:
      content:
        example: lorem ipsum lorem ipsum lorem ipsum
        type: string
      tags:
        example:
        - golang
        - tech
        items:
          type: string
        type: array
      title:
        example: I love Golang
        type: string
    type: object
  api.UpdateArticleResponse:
    properties:
      article:
        $ref: '#/definitions/database.Article'
    type: object
  database.Article:
    properties:
      content:
        example: lorem ipsum lorem ipsum
        type: string
      id:
        example: 1
        type: integer
      published_at:
        example: "2024-06-23T22:21:19.00199+01:00"
        type: string
      tags:
        example:
        - golang
        - go
        - tech
        items:
          type: string
        type: array
      title:
        example: I love Golang
        type: string
      updated_at:
        example: "2024-06-23T22:21:19.00199+01:00"
        type: string
    type: object
  database.PaginationData:
    properties:
      current_page:
        example: 1
        type: integer
      item_count:
        example: 25
        type: integer
      per_page:
        example: 25
        type: integer
      total_items:
        example: 40
        type: integer
      total_pages:
        example: 2
        type: integer
    type: object
info:
  contact: {}
  description: This is a minimalist blogging api.
  title: Golang Blogging API
  version: "1.0"
paths:
  /articles:
    get:
      consumes:
      - application/json
      parameters:
      - collectionFormat: csv
        description: Filter by tags
        in: query
        items:
          type: string
        name: tags
        type: array
      - description: Page
        in: query
        name: page
        type: integer
      - description: Articles per page
        in: query
        name: perPage
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessReponse'
            - properties:
                data:
                  $ref: '#/definitions/api.GetArticlesResponse'
                metadata:
                  $ref: '#/definitions/database.PaginationData'
              type: object
      summary: List article
      tags:
      - articles
    post:
      consumes:
      - application/json
      parameters:
      - description: Request Body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.CreateArticleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessReponse'
            - properties:
                data:
                  $ref: '#/definitions/api.CreateArticleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Create article
      tags:
      - articles
  /articles/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Delete article
      tags:
      - articles
    get:
      consumes:
      - application/json
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessReponse'
            - properties:
                data:
                  $ref: '#/definitions/api.GetArticleByIDResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Get article by ID
      tags:
      - articles
    patch:
      consumes:
      - application/json
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Request Body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/api.UpdateArticleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.SuccessReponse'
            - properties:
                data:
                  $ref: '#/definitions/api.UpdateArticleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      summary: Update article
      tags:
      - articles
swagger: "2.0"
